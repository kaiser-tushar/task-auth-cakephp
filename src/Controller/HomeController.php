<?php
namespace App\Controller;

use App\Service\Utility;
use Cake\Routing\Router;
use Cake\View\Helper\PaginatorHelper;
use Phinx\Util\Util;

class HomeController extends CoreController {
    public function initialize(): void
    {
        parent::initialize(); // TODO: Change the autogenerated stub
        $this->loadComponent('Paginator');
    }

    public function login(){
        if($this->request->is('post')){
            $response = [
                'status' =>'error',
                'message' => 'Something went wrong.Error code: log1'
            ];
            $data = $this->request->getData();
            $table_users = $this->getTableLocator()->get('Users');
            $response_of_authentication = $table_users->autheticate($data);
            if(!Utility::isSuccessResponse($response_of_authentication)){
                $response = $response_of_authentication;
                goto rtn;
            }
            //make token
            $user_info = $response_of_authentication['data'];
            $token_genearaion = Utility::generateToken(['email' => $user_info['email'],'name' => $user_info['name']]);
            if(!Utility::isSuccessResponse($token_genearaion)){
                $response = $token_genearaion;
                goto rtn;
            }
            $response = [
                'status' =>'success',
                'message' => 'Welcome '.$user_info['name'],
                'token' => $token_genearaion['token']
            ];
            $session = $this->request->getSession();
            $session->write('session_id',$token_genearaion['token']);
            rtn:
            return $this->toJson($response);
        }
        if($this->sessionChecker(false)){
            return $this->redirect('/users');
        }
    }
    public function register(){
        if($this->request->is('post')){
            $response = [
                'status' =>'error',
                'message' => 'Something went wrong.Error code: Reg1'
            ];
            $data = $this->request->getData();
            $table_users = $this->getTableLocator()->get('Users');
            try{
                $empty_entity =$table_users->newEmptyEntity();
                $entity =$table_users->patchEntity($empty_entity,$data);
                if($entity->getErrors()){
                    $response['message'] = 'Error occurred';
                    $inputs = ['email','name','password'];
                    $errors = $entity->getErrors();
                    foreach ($inputs as $input){
                        if(!empty($errors[$input])){
                            $index = array_key_first($errors[$input]);
                            if(!empty($index)){
                                $response['message'] = $errors[$input][$index];
                            }
                        }
                    }
                    goto rtn;
                }
                if($table_users->save($entity)){
                    $response = [
                        'status' =>'success',
                        'message' => 'Account created successfully.Please login.'
                    ];
                }
            }catch (\Exception $x){
                $response['message'] = $x->getMessage();
            }

            rtn:
            return $this->toJson($response);
        }
        if($this->sessionChecker(false)){
            return $this->redirect('/users');
        }
    }
    public function index(){
        $this->sessionChecker();
        return $this->redirect('/users');
    }
    public function users(){
        $page = !empty($this->request->getQuery('page'))?$this->request->getQuery('page'):1;
        $limit = !empty($this->request->getQuery('page'))?$this->request->getQuery('limit'):20;
        $format = !empty($this->request->getQuery('format'))?$this->request->getQuery('format'):'html';

        if($this->request->is('ajax') || $format == 'json'){
            if(!$this->sessionChecker(false)){
                $this->toJson(Utility::responseFormat('error','Unauthorized Access'));
            }
            $table_users = $this->getTableLocator()->get('Users');
            $users = $table_users->find()->select(['name','email','created'])->page($page,$limit);
            $total = $table_users->find()->count();
            $total_pages = ceil($total/$limit);
            $offset = (($page - 1) * $limit);
            //link
            $links = $this->linkGenerationForPagination($page,$limit,$total_pages);

            return $this->toJson(Utility::responseFormat('success',[
                'records' => $users,'total' => $total,
                'links' => $links,'offset' => $offset
            ]));

        }
        $this->set(compact('page','limit'));
        $this->sessionChecker();
    }
    public function logout(){
        if($this->sessionChecker()){
            $session = $this->request->getSession();
            $session->delete('session_id');
        }
        return $this->redirect('/login');
    }
    private function linkGenerationForPagination($page,$limit,$total_pages){
        $links = [];
        $links['first'] = Router::url(['controller' => 'home', 'action' => 'users',"?" => ["page" => 1,'limit'=> $limit]],true);
        $links['last'] = Router::url(['controller' => 'home', 'action' => 'users',"?" => ["page" => $total_pages,'limit'=> $limit]],true);
        $links['current'] = Router::url(['controller' => 'home', 'action' => 'users',"?" => ["page" => $page,'limit'=> $limit]],true);
        if($page > 1){
            $links['previous'] = Router::url(['controller' => 'home', 'action' => 'users',"?" => ["page" => $page-1,'limit'=> $limit]],true);
        }
        if($page < $total_pages){
            $links['next'] = Router::url(['controller' => 'home', 'action' => 'users',"?" => ["page" => $page+1,'limit'=> $limit]],true);
        }
        return $links;
    }
    private function usersCakePagination(){
        $table_users = $this->getTableLocator()->get('Users');
        $users = $this->Paginator->paginate($table_users->find());
        $param = $this->Paginator->getPagingParams()['Users'];
        $showing = (($param['page'] - 1) * $param['perPage']) + 1;
        if ($param['page'] == $param['pageCount']) {
            $pageTotalData = $param['count'];
        } else {
            $pageTotalData = $param['page'] * $param['current'];
        }
        $this->set(compact('users','param','showing','pageTotalData'));
    }
}
